import random
import string
import tkinter as tk
from tkinter import messagebox
from tkinter import font as tkfont

def generate_password(length=12, use_uppercase=True, use_lowercase=True, use_digits=True, use_special_chars=True):
    if not any([use_uppercase, use_lowercase, use_digits, use_special_chars]):
        raise ValueError("At least one character type must be selected")

    character_pool = ''
    if use_uppercase:
        character_pool += string.ascii_uppercase
    if use_lowercase:
        character_pool += string.ascii_lowercase
    if use_digits:
        character_pool += string.digits
    if use_special_chars:
        character_pool += string.punctuation

    if len(character_pool) == 0:
        raise ValueError("Character pool is empty. Enable at least one character type.")

    password = ''.join(random.choice(character_pool) for _ in range(length))
    return password

def generate_and_display_password():
    try:
        length = int(length_entry.get())
        use_uppercase = uppercase_var.get()
        use_lowercase = lowercase_var.get()
        use_digits = digits_var.get()
        use_special_chars = special_chars_var.get()

        password = generate_password(
            length=length,
            use_uppercase=use_uppercase,
            use_lowercase=use_lowercase,
            use_digits=use_digits,
            use_special_chars=use_special_chars
        )
        result_entry.delete(0, tk.END)
        result_entry.insert(0, password)
    except ValueError as e:
        messagebox.showerror("Error", str(e))

root = tk.Tk()
root.title("Password Generator")
root.geometry("600x400")
root.configure(bg="#2C3E50")  # Dark background

# Load custom fonts
header_font = tkfont.Font(family="Arial", size=16, weight="bold")
custom_font = tkfont.Font(family="Helvetica", size=12)

gradient_frame = tk.Frame(root, bg="#3498DB", width=600, height=400)
gradient_frame.place(relx=0.5, rely=0.5, anchor="center")

input_frame = tk.Frame(gradient_frame, bg="#1F3A93", padx=20, pady=20)
input_frame.pack(pady=20, fill="x")

output_frame = tk.Frame(gradient_frame, bg="#1F3A93", padx=20, pady=20)
output_frame.pack(pady=20, fill="x")

tk.Label(gradient_frame, text="Password Generator", bg="#1F3A93", fg="white", font=header_font).pack(pady=10)

tk.Label(input_frame, text="Password Length:", bg="#1F3A93", fg="white", font=custom_font).grid(row=0, column=0, sticky="w", padx=10)
length_entry = tk.Entry(input_frame, width=5, font=custom_font)
length_entry.insert(0, "12")
length_entry.grid(row=0, column=1)

uppercase_var = tk.BooleanVar(value=True)
lowercase_var = tk.BooleanVar(value=True)
digits_var = tk.BooleanVar(value=True)
special_chars_var = tk.BooleanVar(value=True)

tk.Checkbutton(input_frame, text="Include Uppercase Letters", variable=uppercase_var, bg="#1F3A93", fg="white", font=custom_font, selectcolor="#2ECC71").grid(row=1, columnspan=2, sticky="w", padx=10)
tk.Checkbutton(input_frame, text="Include Lowercase Letters", variable=lowercase_var, bg="#1F3A93", fg="white", font=custom_font, selectcolor="#2ECC71").grid(row=2, columnspan=2, sticky="w", padx=10)
tk.Checkbutton(input_frame, text="Include Digits", variable=digits_var, bg="#1F3A93", fg="white", font=custom_font, selectcolor="#2ECC71").grid(row=3, columnspan=2, sticky="w", padx=10)
tk.Checkbutton(input_frame, text="Include Special Characters", variable=special_chars_var, bg="#1F3A93", fg="white", font=custom_font, selectcolor="#2ECC71").grid(row=4, columnspan=2, sticky="w", padx=10)

def on_enter(event):
    generate_button.config(bg="#E74C3C", fg="white")

def on_leave(event):
    generate_button.config(bg="#C0392B", fg="white")

generate_button = tk.Button(input_frame, text="Generate Password", command=generate_and_display_password, bg="#C0392B", fg="white", font=custom_font, relief="raised")
generate_button.grid(row=5, columnspan=2, pady=10)
generate_button.bind("<Enter>", on_enter)
generate_button.bind("<Leave>", on_leave)

tk.Label(output_frame, text="Generated Password:", bg="#1F3A93", fg="white", font=custom_font).grid(row=0, column=0, sticky="w", padx=10)
result_entry = tk.Entry(output_frame, width=40, font=custom_font)
result_entry.grid(row=0, column=1, padx=10)

root.mainloop()
